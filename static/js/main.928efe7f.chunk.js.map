{"version":3,"sources":["logo.svg","Movies.js","MoviesList.js","MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movies","_ref","movie","react_default","a","createElement","react_router_dom","to","concat","id","Overdrive_min_default","Poster","src","poster_path","alt","title","styled","img","_templateObject","MoviesList","state","movies","isloading","fetch","res","json","this","setState","results","console","log","_context","t0","MovieGrid","map","src_Movies","key","PureComponent","div","MoviesList_templateObject","MovieDetail","props","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","overview","Component","MovieDetail_templateObject","_templateObject2","App","className","logo","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.928efe7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport Overdrive from 'react-overdrive';\r\n\r\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\r\n\r\nconst Movies=({movie})=> (  \r\n\r\n    <Link to={`/${movie.id}`}>\r\n        <Overdrive id={movie.id}>\r\n            <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title}/>       \r\n        </Overdrive>\r\n    </Link>\r\n\r\n);\r\nexport default Movies;\r\n\r\nexport const Poster = styled.img`\r\n    box-shadow: 0 0 35px black;\r\n`;","import React, { PureComponent } from 'react';\r\nimport Movies from './Movies';\r\nimport styled from 'styled-components';\r\nclass MoviesList extends PureComponent {\r\n  \r\n  state = {\r\n    movies: [],\r\n    isloading:true\r\n  }\r\n\r\n  async componentDidMount(){\r\n    try {\r\n      const res = await fetch('https://api.themoviedb.org/3/discover/movie?api_key=28ac7a07c958eb21e3e81a4bc9671dd3&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1');\r\n      const movies = await res.json();\r\n      this.setState({\r\n        movies: movies.results,\r\n        isloading:false\r\n      })\r\n    } catch(e){\r\n      console.log(e);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n      {this.state.isloading &&<div>loading ....</div>}\r\n        <MovieGrid>\r\n          {this.state.movies.map(movie => <Movies key= {movie.id} movie={movie}/>)}\r\n        </MovieGrid>\r\n      </div> \r\n    );\r\n  }\r\n}\r\nexport default MoviesList;\r\n\r\nconst MovieGrid = styled.div`\r\n    display: grid;\r\n    padding: 1rem;\r\n    grid-template-columns: repeat(6, 1fr);\r\n    grid-row-gap: 1rem;\r\n`;\r\n\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport {Poster} from './Movies';\r\nimport Overdrive from 'react-overdrive';\r\n\r\n\r\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\r\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280';\r\n\r\nclass MovieDetail extends Component {\r\n  \r\n  state = {\r\n    movie: {},\r\n    isloading:true\r\n  }\r\n\r\n  async componentDidMount(){\r\n    try {\r\n      const res = await fetch(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=28ac7a07c958eb21e3e81a4bc9671dd3&language=en-US`);\r\n      const movie = await res.json();\r\n      this.setState({\r\n        movie,\r\n        isloading:false\r\n      })\r\n    } catch(e){\r\n      console.log(e);\r\n    }\r\n  }\r\n  render() {\r\n      const {movie} = this.state;\r\n\r\n    //   let detail = ( <h1>Hi</h1>);\r\n\r\n    //   if(this.state.movie.title){\r\n    //       detail = (\r\n    //         <h4>Hello</h4>\r\n    //       );\r\n    //   }\r\n    return (\r\n        <div>\r\n        {this.state.isloading &&<div>loading ....</div>}\r\n        <MovieWrapper backdrop= {`${BACKDROP_PATH}${movie.backdrop_path}`}>\r\n            <MovieInfo>\r\n            <Overdrive id={movie.id}>\r\n                <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt=\"\"/>\r\n            </Overdrive>\r\n                <div>\r\n                    {/* {detail} */}\r\n                    {this.state.movie.title ? (\r\n                        <h4>Hello</h4>\r\n                    ):(\r\n                        <h1>Hi</h1>\r\n                    )}\r\n\r\n                    <h1>{movie.title}</h1>\r\n                    <h3>{movie.release_date}</h3>\r\n                    <p>{movie.overview}</p>\r\n                </div>\r\n            </MovieInfo>\r\n        </MovieWrapper>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default MovieDetail;\r\n\r\nconst MovieWrapper = styled.div`\r\n    position: relative;\r\n    padding-top: 50vh;\r\n    background: url(${props => props.backdrop}) no-repeat;\r\n    background-size: cover;\r\n`;\r\n\r\nconst MovieInfo = styled.div`\r\n    background: white;\r\n    text-align: left;\r\n    padding:2rem 10%;\r\n    display: flex;\r\n    >div {\r\n        margin-left:20px;\r\n    }\r\n    img {\r\n        position:relative;\r\n        top:-5rem;\r\n    }\r\n`;\r\n\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Link,\r\n} from 'react-router-dom';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport MoviesList from './MoviesList';\r\nimport MovieDetail from './MovieDetail';\r\n\r\nconst App = ()=> (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <Link to =\"/\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </Link>\r\n        </header>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MoviesList}/>\r\n          <Route path=\"/:id\" component={MovieDetail}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n);\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}> <App /> </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}